generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ENUMS
//
enum UserRole {
  SUPER_ADMIN
  ADMIN
  POLICE
  FIRE_SERVICE
  CITIZEN
}

enum ComplaintType {
  TRAFFIC
  INFRASTRUCTURE
  TRAFFIC_VIOLATION
}

enum CameraStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  OFFLINE
}

enum VehicleType {
  CAR
  MOTORCYCLE
  TRUCK
  BUS
  BICYCLE
  OTHER
}

enum ViolationStatus {
  PENDING
  CONFIRMED
  DISPUTED
  RESOLVED
}

enum FineStatus {
  UNPAID
  PAID
  CANCELLED
  DISPUTED
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  MOBILE_MONEY
  ONLINE
}

enum AddressType {
  HOME
  OFFICE
  STATION
  SERVICE_CENTER
  OTHER
}

enum LocationType {
  POLICE_STATION
  FIRE_SERVICE
  CAMERA
  INCIDENT
  COMPLAINT
  VIOLATION
}

enum PoliceHierarchyLevel {
  HEADQUARTERS // National/Central level
  RANGE // Regional level
  DISTRICT // District level  
  CIRCLE // Circle level
  STATION // Station level (actual police stations)
  OUTPOST // Sub-station/outpost level
}

enum StationStatus {
  ACTIVE
  INACTIVE
  UNDER_CONSTRUCTION
  TEMPORARY_CLOSED
}

enum LicenseCategory {
  LIGHT_VEHICLE // Light vehicle (cars, small vans)
  MOTORCYCLE // Motorcycle only
  LIGHT_VEHICLE_MOTORCYCLE // Combined light vehicle + motorcycle
  HEAVY_VEHICLE // Heavy vehicles (trucks, buses)
  PSV // Public Service Vehicle
  GOODS_VEHICLE // Commercial goods vehicle
}

enum CitizenReportStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AppealStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  REPORT_SUBMITTED
  REPORT_APPROVED
  REPORT_REJECTED
  APPEAL_SUBMITTED
  APPEAL_APPROVED
  APPEAL_REJECTED
  REWARD_EARNED
  PENALTY_APPLIED
  DEBT_CREATED
  PAYMENT_RECEIVED
  FIRE_INCIDENT_REPORTED
  FIRE_INCIDENT_ASSIGNED
  FIRE_INCIDENT_RESOLVED
  SYSTEM
  INFO
  WARNING
  SUCCESS
  ERROR
}

enum FireIncidentType {
  BUILDING_FIRE
  VEHICLE_FIRE
  FOREST_FIRE
  INDUSTRIAL_FIRE
  ELECTRICAL_FIRE
  GAS_EXPLOSION
  CHEMICAL_FIRE
  RESCUE_OPERATION
  MEDICAL_EMERGENCY
  OTHER
}

enum FireIncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FireIncidentStatus {
  REPORTED
  DISPATCHED
  IN_PROGRESS
  RESOLVED
  CANCELLED
}

enum FireTeamStatus {
  AVAILABLE
  ON_DUTY
  OFF_DUTY
  ON_LEAVE
  TRAINING
}

enum FireEquipmentStatus {
  OPERATIONAL
  UNDER_MAINTENANCE
  OUT_OF_SERVICE
  DEPLOYED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ViolationType {
  OVER_SPEEDING
  WRONG_SIDE_DRIVING
  SIGNAL_BREAKING
  NO_HELMET
  ILLEGAL_PARKING
  DRIVING_WITHOUT_LICENSE
  OVERLOADING
  PHONE_USAGE_WHILE_DRIVING
  DRUNK_DRIVING
  OTHER
}

enum TransactionType {
  REWARD          // Earnings from approved reports
  PENALTY         // Deductions from rejected reports
  BONUS           // System bonuses
  DEDUCTION       // System deductions
  DEBT_PAYMENT    // Payment made towards outstanding debt
}

enum TransactionSource {
  CITIZEN_REPORT  // From citizen report approval/rejection
  VIOLATION       // From traffic violation
  FINE_PAYMENT    // From fine payment
  DEBT_PAYMENT    // From debt payment
  SYSTEM          // System generated
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum WithdrawalMethod {
  BANK_TRANSFER
  MOBILE_BANKING
  CASH
}

enum WithdrawalStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum DriverStatus {
  AVAILABLE
  ASSIGNED
  INACTIVE
}

enum VehicleAssignmentStatus {
  PENDING
  ACTIVE
  REJECTED
  RESIGNED
  TERMINATED
}

enum ChatRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  EMOJI
}

//
// NORMALIZED MODELS
//

// Location management - normalized to eliminate redundant lat/lng data
model Location {
  id         String       @id @default(uuid())
  latitude   Float
  longitude  Float
  address    String?
  city       String?
  district   String?
  division   String?
  country    String       @default("Bangladesh")
  postalCode String?
  type       LocationType
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  // Relations
  policeOrganizations PoliceOrganization[]
  policeStations      PoliceStation[]
  fireServices        FireService[]
  fireIncidents       FireIncident[]
  cameras             Camera[]
  violations          Violation[]
  incidents           Incident[]
  complaints          Complaint[]
  citizenReports      CitizenReport[]

  @@index([latitude, longitude])
  @@index([type])
  @@map("locations")
}

// Contact information - normalized to avoid repetition
model ContactInfo {
  id             String   @id @default(uuid())
  phone          String?
  email          String?
  website        String?
  emergencyPhone String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  policeOrganizations PoliceOrganization[]
  policeStations      PoliceStation[]
  fireServices        FireService[]

  @@map("contact_info")
}

//
// HIERARCHICAL POLICE ORGANIZATION MODELS
//

// Police organizational hierarchy - normalized structure
model PoliceOrganization {
  id          String               @id @default(uuid())
  name        String // e.g., "Bangladesh Police", "Dhaka Metropolitan Police"
  code        String               @unique // e.g., "BP", "DMP", "RMP"
  level       PoliceHierarchyLevel
  description String?

  // Self-referencing hierarchy
  parentId String?
  parent   PoliceOrganization?  @relation("Hierarchy", fields: [parentId], references: [id])
  children PoliceOrganization[] @relation("Hierarchy")

  // Relations to actual stations
  stations PoliceStation[]

  // Normalized location and contact
  locationId String?
  location   Location?    @relation(fields: [locationId], references: [id])
  contactId  String?
  contact    ContactInfo? @relation(fields: [contactId], references: [id])

  // Administrative details
  headOfficerId String? // Officer in charge
  headOfficer   User?   @relation("OrganizationHead", fields: [headOfficerId], references: [id])

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([level])
  @@index([parentId])
  @@index([code])
  @@index([isActive])
  @@map("police_organizations")
}

//
// CORE MODELS
//
model User {
  id                 String   @id @default(uuid())
  firstName          String
  lastName           String
  phone              String
  email              String   @unique
  password           String
  role               UserRole @default(CITIZEN)
  designation        String? // Job title/position (e.g., "Inspector", "Sub-Inspector", "Constable", "Chief", etc.)
  nidNo              String?  @unique
  birthCertificateNo String?  @unique
  profileImage       String?

  // Personal Information
  dateOfBirth DateTime?
  gender      String? // "MALE", "FEMALE", "OTHER"
  bloodGroup  String? // "A+", "B+", "O+", etc.

  // Contact Information
  alternatePhone        String?
  emergencyContact      String?
  emergencyContactPhone String?

  // Address Information
  presentAddress    String?
  presentCity       String?
  presentDistrict   String?
  presentDivision   String?
  presentUpazila    String?
  presentPostalCode String?

  permanentAddress    String?
  permanentCity       String?
  permanentDistrict   String?
  permanentDivision   String?
  permanentUpazila    String?
  permanentPostalCode String?

  // Driving License Information
  drivingLicenseNo         String?   @unique
  drivingLicenseIssueDate  DateTime?
  drivingLicenseExpiryDate DateTime?
  drivingLicenseCategory   String? // "MOTORCYCLE", "CAR", "HEAVY", "PROFESSIONAL", etc.
  isDrivingLicenseVerified Boolean   @default(false)

  // Professional Information (for police/fire service)
  badgeNo        String?   @unique // Police badge number
  joiningDate    DateTime? // Date of joining service
  serviceLength  Int? // Years of service
  rank           String? // Police rank (Constable, ASI, SI, Inspector, etc.)
  specialization String? // Area of expertise

  // Email verification fields
  isEmailVerified          Boolean   @default(false)
  emailVerificationToken   String?
  emailVerificationExpires DateTime?

  // Password reset fields
  passwordResetToken   String?
  passwordResetExpires DateTime?

  // Status fields
  isDeleted   Boolean   @default(false)
  isBlocked   Boolean   @default(false)
  isActive    Boolean   @default(true)
  blockedAt   DateTime?
  unblockedAt DateTime?
  verifiedAt  DateTime?
  blockedBy   String?
  unblockedBy String?
  verifiedBy  String?
  blockReason String?
  
  // Online Status fields
  isOnline       Boolean   @default(false)
  lastSeenAt     DateTime?
  lastActivityAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stationId String?
  station   PoliceStation? @relation(fields: [stationId], references: [id])

  // Police hierarchy relations
  headsOrganizations PoliceOrganization[] @relation("OrganizationHead")
  stationAsOC        PoliceStation[]      @relation("StationOC")

  vehiclesOwned      Vehicle[]           @relation("OwnerVehicles")
  vehiclesDriven     Vehicle[]           @relation("DriverVehicles")
  payments           Payment[]
  citizenGem         CitizenGem?
  incidents          Incident[]
  complaints         Complaint[]
  drivingLicenses    DrivingLicense[]    @relation("DrivingLicenses")
  citizenReports     CitizenReport[]     @relation("CitizenReports")
  reviewedReports    CitizenReport[]     @relation("ReviewedReports")
  appealReviewedReports CitizenReport[]  @relation("AppealReviewedReports")
  rewardTransactions RewardTransaction[]
  withdrawals        WithdrawalRequest[]
  processedWithdrawals WithdrawalRequest[] @relation("ProcessedWithdrawals")
  outstandingDebts   OutstandingDebt[]   @relation("UserDebts")
  notifications      Notification[]      @relation("UserNotifications")
  
  // Driver Marketplace Relations
  driverProfile         DriverProfile?      @relation("DriverProfile")
  chatRoomsAsCitizen    ChatRoom[]          @relation("CitizenChats")
  chatRoomsAsDriver     ChatRoom[]          @relation("DriverChats")
  sentMessages          ChatMessage[]       @relation("SentMessages")
  driverAssignments     VehicleAssignment[] @relation("DriverAssignments")
  ownerAssignments      VehicleAssignment[] @relation("OwnerAssignments")
  
  // Official Chat Relations
  officialChatsAsUser1  OfficialChatRoom[]  @relation("OfficialChatsAsUser1")
  officialChatsAsUser2  OfficialChatRoom[]  @relation("OfficialChatsAsUser2")
  sentOfficialMessages  OfficialChatMessage[] @relation("SentOfficialMessages")

  // Fire Service Relations
  fireTeamMember        FireTeamMember?
  reportedFireIncidents FireIncident[]      @relation("FireIncidentReporter")

  // Gem Penalty Relations
  gemPenalties          GemPenalty[]        @relation("GemPenalties")
  appliedPenalties      GemPenalty[]        @relation("AppliedGemPenalties")

  @@index([email])
  @@index([nidNo])
  @@index([birthCertificateNo])
  @@index([isEmailVerified])
  @@map("users")
}

model PoliceStation {
  id          String        @id @default(uuid())
  name        String
  code        String        @unique // Station code (e.g., "DMP-RAM-001", "RMP-CTG-002")
  stationType String? // "THANA", "OUTPOST", "TRAFFIC", "SPECIAL"
  status      StationStatus @default(ACTIVE)

  // Hierarchical organization relation
  organizationId String?
  organization   PoliceOrganization? @relation(fields: [organizationId], references: [id])

  // Normalized relations
  locationId String?
  location   Location?    @relation(fields: [locationId], references: [id])
  contactId  String?
  contact    ContactInfo? @relation(fields: [contactId], references: [id])

  // Station management
  officerInChargeId String? // OC (Officer in Charge)
  officerInCharge   User?   @relation("StationOC", fields: [officerInChargeId], references: [id])

  // Capacity and resources
  capacity        Int? // Number of officers/staff capacity
  currentStrength Int? // Current number of officers

  // Relations
  cameras    Camera[]
  users      User[] // Officers assigned to this station
  incidents  Incident[] // Incidents handled by this station
  complaints Complaint[] // Complaints filed at this station

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
  @@index([organizationId])
  @@index([status])
  @@index([stationType])
  @@map("police_stations")
}

model FireService {
  id   String @id @default(uuid())
  name String
  code String @unique // Service code (e.g., "FSCD-DHK-01")

  // Normalized relations
  locationId String?
  location   Location?    @relation(fields: [locationId], references: [id])
  contactId  String?
  contact    ContactInfo? @relation(fields: [contactId], references: [id])

  // Relations
  cameras       Camera[]
  incidents     FireIncident[]
  teamMembers   FireTeamMember[]
  equipment     FireEquipment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
  @@map("fire_services")
}

model FireIncident {
  id              String                @id @default(uuid())
  incidentNumber  String                @unique // e.g., "FI-2024-0001"
  type            FireIncidentType
  severity        FireIncidentSeverity
  status          FireIncidentStatus    @default(REPORTED)
  description     String                @db.Text
  
  // Location details
  locationId      String?
  location        Location?             @relation(fields: [locationId], references: [id])
  address         String?
  coordinates     String?               // "lat,lng"
  
  // Fire service assignment
  fireServiceId   String?
  fireService     FireService?          @relation(fields: [fireServiceId], references: [id])
  
  // Reporter information
  reportedBy      String?               // Name of reporter
  reporterPhone   String?
  reporterUserId  String?               // If reported by registered user
  reporterUser    User?                 @relation("FireIncidentReporter", fields: [reporterUserId], references: [id])
  
  // Response details
  dispatchedAt    DateTime?
  arrivedAt       DateTime?
  resolvedAt      DateTime?
  responseTime    Int?                  // minutes
  casualties      Int                   @default(0)
  injuries        Int                   @default(0)
  propertyDamage  String?               // Estimated damage
  notes           String?               @db.Text
  
  // Team assigned
  teamMembers     FireIncidentAssignment[]
  equipment       FireEquipmentDeployment[]
  
  // Media/Evidence
  images          String[]              @default([])
  documents       String[]              @default([])
  
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  @@index([status])
  @@index([severity])
  @@index([type])
  @@index([fireServiceId])
  @@index([createdAt])
  @@map("fire_incidents")
}

model FireTeamMember {
  id              String          @id @default(uuid())
  fireServiceId   String
  fireService     FireService     @relation(fields: [fireServiceId], references: [id], onDelete: Cascade)
  
  userId          String          @unique
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Team member details
  designation     String          // e.g., "Fire Fighter", "Senior Station Officer"
  employeeId      String          @unique
  rank            String?
  status          FireTeamStatus  @default(AVAILABLE)
  specialization  String[]        @default([]) // e.g., ["Rescue", "Hazmat"]
  
  // Contact
  emergencyContact String?
  emergencyPhone  String?
  
  // Assignments
  incidents       FireIncidentAssignment[]
  
  joinedAt        DateTime        @default(now())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([fireServiceId])
  @@index([userId])
  @@index([status])
  @@map("fire_team_members")
}

model FireIncidentAssignment {
  id            String          @id @default(uuid())
  incidentId    String
  incident      FireIncident    @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  
  teamMemberId  String
  teamMember    FireTeamMember  @relation(fields: [teamMemberId], references: [id], onDelete: Cascade)
  
  assignedAt    DateTime        @default(now())
  role          String?         // Role in this incident

  @@unique([incidentId, teamMemberId])
  @@index([incidentId])
  @@index([teamMemberId])
  @@map("fire_incident_assignments")
}

model FireEquipment {
  id              String                @id @default(uuid())
  fireServiceId   String
  fireService     FireService           @relation(fields: [fireServiceId], references: [id], onDelete: Cascade)
  
  // Equipment details
  name            String
  type            String                // e.g., "Fire Engine", "Ladder Truck", "Ambulance"
  registrationNo  String                @unique
  model           String?
  manufacturer    String?
  year            Int?
  
  // Status
  status          FireEquipmentStatus   @default(OPERATIONAL)
  lastMaintenance DateTime?
  nextMaintenance DateTime?
  
  // Specifications
  capacity        String?               // e.g., "5000 liters"
  specifications  String?               @db.Text
  
  // Deployments
  deployments     FireEquipmentDeployment[]
  
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  @@index([fireServiceId])
  @@index([status])
  @@index([type])
  @@map("fire_equipment")
}

model FireEquipmentDeployment {
  id          String          @id @default(uuid())
  incidentId  String
  incident    FireIncident    @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  
  equipmentId String
  equipment   FireEquipment   @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  
  deployedAt  DateTime        @default(now())
  returnedAt  DateTime?

  @@index([incidentId])
  @@index([equipmentId])
  @@map("fire_equipment_deployments")
}

model Camera {
  id          String       @id @default(uuid())
  name        String? // Camera identifier/name
  streamUrl   String
  installedAt DateTime
  status      CameraStatus @default(ACTIVE)

  // Normalized location
  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])

  // Relations to stations/services
  stationId     String?
  station       PoliceStation? @relation(fields: [stationId], references: [id])
  fireServiceId String?
  fireService   FireService?   @relation(fields: [fireServiceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([installedAt])
  @@map("cameras")
}

model Rule {
  id          String  @id @default(uuid())
  code        String  @unique
  title       String // Short title for the rule
  description String
  penalty     Int? // Default penalty amount
  isActive    Boolean @default(true)

  violations Violation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
  @@index([isActive])
  @@map("rules")
}

model Vehicle {
  id             String      @id @default(uuid())
  type           VehicleType
  plateNo        String      @unique
  brand          String? // Vehicle manufacturer (Toyota, Honda, etc.) - renamed from make
  model          String? // Vehicle model (Corolla, Civic, etc.)
  year           Int? // Manufacturing year
  color          String? // Vehicle color
  engineNo       String      @unique // Engine number - required field
  chassisNo      String      @unique // Chassis number - required field
  registrationNo String?     @unique // Tax Token number - optional separate from plate
  registrationDate DateTime? // Vehicle registration date from authorities

  ownerId  String
  owner    User    @relation("OwnerVehicles", fields: [ownerId], references: [id])
  driverId String?
  driver   User?   @relation("DriverVehicles", fields: [driverId], references: [id])

  registeredAt DateTime  @default(now())
  expiresAt    DateTime? // Tax token expiry date
  isDeleted    Boolean   @default(false)
  isActive     Boolean   @default(true)

  violations  Violation[]
  assignments VehicleAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([plateNo])
  @@index([engineNo])
  @@index([chassisNo])
  @@index([ownerId])
  @@index([driverId])
  @@index([isActive])
  @@map("vehicles")
}

model Violation {
  id        String  @id @default(uuid())
  ruleId    String
  rule      Rule    @relation(fields: [ruleId], references: [id])
  vehicleId String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  // Normalized location
  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])

  description String?
  status      ViolationStatus @default(PENDING)
  evidenceUrl String? // Photo/video evidence URL
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  fine        Fine?
  gemPenalties GemPenalty[]

  @@index([vehicleId])
  @@index([ruleId])
  @@index([status])
  @@index([createdAt])
  @@map("violations")
}

model Fine {
  id          String     @id @default(uuid())
  violationId String     @unique
  violation   Violation  @relation(fields: [violationId], references: [id])
  amount      Int
  status      FineStatus @default(UNPAID)
  dueDate     DateTime? // When the fine is due
  issuedAt    DateTime   @default(now())
  paidAt      DateTime? // When fully paid
  payments    Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([dueDate])
  @@index([issuedAt])
  @@map("fines")
}

model Payment {
  id            String        @id @default(uuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  fineId        String
  fine          Fine          @relation(fields: [fineId], references: [id])
  amount        Int
  transactionId String? // External transaction reference
  paymentMethod PaymentMethod
  paymentStatus String        @default("COMPLETED") // PENDING, COMPLETED, FAILED, REFUNDED

  paidAt    DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([fineId])
  @@index([paymentStatus])
  @@index([paidAt])
  @@map("payments")
}

model Incident {
  id          String  @id @default(uuid())
  externalId  String? @unique // External ID for AI service integration
  type        String // ACCIDENT, FIRE, TRAFFIC_VIOLATION, etc.
  title       String
  description String?
  priority    String? // HIGH, MEDIUM, LOW
  severity    String? // LOW, MEDIUM, HIGH, CRITICAL
  status      String  @default("REPORTED") // REPORTED, IN_PROGRESS, RESOLVED, CLOSED

  // Location data - can be either normalized or direct
  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])

  // Direct location data for AI integration
  latitude  Float?
  longitude Float?
  address   String?

  // Metadata for AI integration
  metadata Json? // Store AI confidence, vehicles involved, etc.

  reportedById String?
  reportedBy   User?   @relation(fields: [reportedById], references: [id])

  // Police station handling this incident
  handlingStationId String?
  handlingStation   PoliceStation? @relation(fields: [handlingStationId], references: [id])

  reportedAt DateTime  @default(now())
  resolvedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([severity])
  @@index([reportedAt])
  @@index([createdAt])
  @@index([externalId])
  @@map("incidents")
}

model Complaint {
  id          String        @id @default(uuid())
  type        ComplaintType
  title       String
  description String?
  priority    String? // HIGH, MEDIUM, LOW
  status      String        @default("PENDING") // PENDING, IN_PROGRESS, RESOLVED, CLOSED
  
  // Evidence URLs for infrastructure issues (images)
  evidenceUrls String[] @default([])

  // Normalized location
  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])

  complainerId String?
  complainer   User?   @relation(fields: [complainerId], references: [id])

  // Police station handling this complaint
  handlingStationId String?
  handlingStation   PoliceStation? @relation(fields: [handlingStationId], references: [id])

  resolvedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@map("complaints")
}

model CitizenReport {
  id        String @id @default(uuid())
  citizenId String
  citizen   User   @relation("CitizenReports", fields: [citizenId], references: [id])

  vehiclePlate  String
  violationType ViolationType
  description   String?
  evidenceUrl   String[] // Array of URLs for uploaded images/videos

  // Normalized location
  locationId String
  location   Location @relation(fields: [locationId], references: [id])

  status      CitizenReportStatus @default(PENDING)
  reviewNotes String?
  reviewedBy  String?
  reviewer    User?               @relation("ReviewedReports", fields: [reviewedBy], references: [id])
  reviewedAt  DateTime?

  // Police transparency - Additional reviewer info
  reviewerBadgeNumber String?
  reviewerStationId   String?

  rewardAmount  Float? // If approved, citizen gets 5% reward
  penaltyAmount Float? // If rejected, citizen gets 5% penalty

  // Appeal system (one-time appeal for rejected reports)
  appealSubmitted     Boolean      @default(false)
  appealReason        String?
  appealStatus        AppealStatus?
  appealReviewedBy    String?
  appealReviewer      User?        @relation("AppealReviewedReports", fields: [appealReviewedBy], references: [id])
  appealReviewedAt    DateTime?
  appealNotes         String?
  
  // Additional penalty for failed appeals (1.5% extra)
  additionalPenaltyApplied Boolean @default(false)
  additionalPenaltyAmount  Float?

  rewardTransactions RewardTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([citizenId])
  @@index([vehiclePlate])
  @@index([status])
  @@index([violationType])
  @@index([createdAt])
  @@index([appealSubmitted])
  @@index([appealStatus])
  @@map("citizen_reports")
}

model CitizenGem {
  citizenId    String   @id
  citizen      User     @relation(fields: [citizenId], references: [id])
  amount       Int      @default(0)
  isRestricted Boolean  @default(false)
  lastUpdated  DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("citizen_gems")
}

model GemPenalty {
  id            String   @id @default(uuid())
  citizenId     String
  citizen       User     @relation("GemPenalties", fields: [citizenId], references: [id])
  
  // Penalty details
  amount        Int                     // Gems deducted
  reason        String                  @db.Text
  violationType ViolationType?
  severity      ViolationSeverity       @default(MODERATE)
  
  // Related entities
  violationId   String?
  violation     Violation?              @relation(fields: [violationId], references: [id])
  licenseNo     String?                 // Driver's license number
  
  // Officer who applied the penalty
  appliedBy     String
  officer       User                    @relation("AppliedGemPenalties", fields: [appliedBy], references: [id])
  
  notes         String?                 @db.Text
  
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt

  @@index([citizenId])
  @@index([appliedBy])
  @@index([violationId])
  @@index([licenseNo])
  @@index([createdAt])
  @@map("gem_penalties")
}

enum ViolationSeverity {
  MINOR       // 5-10 gems
  MODERATE    // 10-25 gems  
  SERIOUS     // 25-50 gems
  SEVERE      // 50-100 gems
  CRITICAL    // 100+ gems
}

// Driving License Management System
model DrivingLicense {
  id        String @id @default(uuid())
  licenseNo String @unique
  citizenId String
  citizen   User   @relation("DrivingLicenses", fields: [citizenId], references: [id])

  // License Details
  category         LicenseCategory // Enum for license categories
  issueDate        DateTime
  expiryDate       DateTime
  issuingAuthority String // "BRTA", "DISTRICT_TRANSPORT", etc.

  // Status and Verification
  isActive   Boolean   @default(true)
  isVerified Boolean   @default(false)
  verifiedBy String? // ID of admin/police who verified
  verifiedAt DateTime?

  // Restrictions and endorsements
  restrictions String? // JSON array of restrictions ["NO_NIGHT_DRIVING", "CORRECTIVE_LENSES"]
  endorsements String? // JSON array of endorsements ["MOTORCYCLE", "MANUAL_TRANSMISSION"]

  // Gem System (Bangladesh driving license scoring)
  gems Int @default(10) // Default 10 gems on license creation
  isBlacklisted Boolean @default(false) // Becomes true when gems reach 0
  blacklistedAt DateTime?
  blacklistReason String? // Reason for blacklist
  blacklistPenaltyPaid Boolean @default(false) // ৳5000 penalty payment status
  
  // Violation tracking
  violationCount   Int       @default(0)
  lastViolationAt  DateTime?
  isSuspended      Boolean   @default(false)
  suspendedUntil   DateTime?
  suspensionReason String?

  // Relations
  driverProfile      DriverProfile?      @relation("DriverLicense")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([licenseNo])
  @@index([citizenId])
  @@index([category])
  @@index([isActive])
  @@index([isVerified])
  @@index([expiryDate])
  @@index([isBlacklisted])
  @@index([gems])
  @@map("driving_licenses")
}

// Vehicle Assignment System - tracks who is assigned to drive which vehicle
// Reward Transaction System - tracks rewards and penalties
model RewardTransaction {
  id          String            @id @default(uuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  amount      Float
  type        TransactionType // REWARD, PENALTY, BONUS, DEDUCTION
  source      TransactionSource // CITIZEN_REPORT, VIOLATION, FINE_PAYMENT, SYSTEM
  description String

  // Related entities
  relatedReportId     String?
  relatedReport       CitizenReport? @relation(fields: [relatedReportId], references: [id])
  relatedViolationId  String?

  status      TransactionStatus @default(PENDING)
  processedAt DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Debt relation
  debtsCreated OutstandingDebt[] @relation("DebtSource")

  @@index([userId])
  @@index([type])
  @@index([source])
  @@index([status])
  @@index([createdAt])
  @@index([relatedReportId])
  @@map("reward_transactions")
}

// Withdrawal Request System - tracks withdrawal requests
model WithdrawalRequest {
  id             String           @id @default(uuid())
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  amount         Float
  method         WithdrawalMethod // BANK_TRANSFER, MOBILE_BANKING, CASH
  accountDetails Json // Store account details as JSON
  status         WithdrawalStatus @default(PENDING)
  notes          String?

  requestedAt DateTime  @default(now())
  processedAt DateTime?
  processedBy String?
  processor   User?     @relation("ProcessedWithdrawals", fields: [processedBy], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([requestedAt])
  @@index([processedBy])
  @@map("withdrawal_requests")
}

// Outstanding Debt System - tracks negative balances and late payment penalties
model OutstandingDebt {
  id                String    @id @default(uuid())
  userId            String
  user              User      @relation("UserDebts", fields: [userId], references: [id])
  
  originalAmount    Float     // Original debt amount
  currentAmount     Float     // Current amount owed (includes late fees)
  lateFees          Float     @default(0) // Accumulated late payment fees
  
  dueDate           DateTime  // 7 days from creation
  lastPenaltyDate   DateTime? // Last time penalty was applied
  weeksPastDue      Int       @default(0) // Number of weeks past due date
  
  status            DebtStatus @default(OUTSTANDING) // OUTSTANDING, PAID, WAIVED
  
  // Payment tracking
  paidAmount        Float     @default(0)
  paidAt            DateTime?
  paymentReference  String?   // Reference to payment transaction
  
  // Related transaction that created the debt
  relatedTransactionId String?
  relatedTransaction   RewardTransaction? @relation("DebtSource", fields: [relatedTransactionId], references: [id])
  
  notes             String?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
  @@index([status])
  @@index([dueDate])
  @@index([createdAt])
  @@map("outstanding_debts")
}

enum DebtStatus {
  OUTSTANDING // Still owed
  PAID        // Fully paid
  WAIVED      // Forgiven by admin
  PARTIAL     // Partially paid
}

// Notification System - for all user notifications
model Notification {
  id     String @id @default(uuid())
  userId String
  user   User   @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  title   String
  message String
  type    NotificationType

  // Related entity (optional)
  relatedEntityType String? // "REPORT", "APPEAL", "DEBT", "TRANSACTION", etc.
  relatedEntityId   String?

  // Read status
  isRead Boolean   @default(false)
  readAt DateTime?

  // Priority and action
  priority    NotificationPriority @default(NORMAL)
  actionUrl   String? // URL to navigate when clicked
  actionLabel String? // Label for action button

  // Metadata (flexible JSON for additional info)
  metadata Json?

  // Expiration (optional)
  expiresAt DateTime?

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([isRead])
  @@index([type])
  @@index([createdAt])
  @@index([userId, isRead])
  @@map("notifications")
}

// Bangladesh Geographical Data Models
model Division {
  id        String   @id // Using API's id (1-8)
  name      String   @unique // English name
  bn_name   String   @unique // Bengali name
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  districts District[]

  @@index([name])
  @@index([bn_name])
  @@map("divisions")
}

model District {
  id          String   @id // Using API's id
  divisionId  String   @map("division_id")
  name        String   // English name
  bn_name     String   // Bengali name
  lat         String?  // Latitude
  lon         String?  // Longitude
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  division Division   @relation(fields: [divisionId], references: [id], onDelete: Cascade)
  upazilas Upazila[]

  @@unique([divisionId, name])
  @@index([name])
  @@index([bn_name])
  @@index([divisionId])
  @@map("districts")
}

model Upazila {
  id         String   @id // Using API's id
  districtId String   @map("district_id")
  name       String   // English name
  bn_name    String   // Bengali name
  url        String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  district District @relation(fields: [districtId], references: [id], onDelete: Cascade)

  @@unique([districtId, name])
  @@index([name])
  @@index([bn_name])
  @@index([districtId])
  @@map("upazilas")
}

//
// DRIVER MARKETPLACE SYSTEM
//

// Driver Profile - Citizens can become drivers
model DriverProfile {
  id               String       @id @default(uuid())
  userId           String       @unique
  drivingLicenseId String       @unique
  
  // Job Details
  experienceYears  Int
  expectedSalary   Int
  preferredLocations String[]    // Array of preferred job locations
  availability     String        // e.g., "Full-time", "Part-time", "Weekend only"
  bio              String?       // Driver's description/bio
  
  status           DriverStatus @default(AVAILABLE)
  
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relations
  user             User         @relation("DriverProfile", fields: [userId], references: [id], onDelete: Cascade)
  drivingLicense   DrivingLicense @relation("DriverLicense", fields: [drivingLicenseId], references: [id], onDelete: Restrict)
  
  @@index([userId])
  @@index([status])
  @@index([experienceYears])
  @@index([expectedSalary])
  @@map("driver_profiles")
}

// Chat Room - For citizen-driver communication
model ChatRoom {
  id         String            @id @default(uuid())
  citizenId  String
  driverId   String
  status     ChatRequestStatus @default(PENDING)
  
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  
  // Relations
  citizen    User              @relation("CitizenChats", fields: [citizenId], references: [id], onDelete: Cascade)
  driver     User              @relation("DriverChats", fields: [driverId], references: [id], onDelete: Cascade)
  
  // Messages in this room
  messages   ChatMessage[]
  
  @@unique([citizenId, driverId])
  @@index([citizenId])
  @@index([driverId])
  @@index([status])
  @@map("chat_rooms")
}

// Chat Message - Individual messages in chat rooms
model ChatMessage {
  id         String      @id @default(uuid())
  chatRoomId String
  senderId   String
  message    String      @db.Text
  messageType MessageType @default(TEXT)
  mediaUrl   String?     // Encrypted Cloudinary URL for images/videos
  encrypted  Boolean     @default(true)
  read       Boolean     @default(false)
  
  createdAt  DateTime @default(now())
  
  // Relations
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  
  @@index([chatRoomId])
  @@index([senderId])
  @@index([createdAt])
  @@map("chat_messages")
}

// Official Chat Room - For admin-to-admin, police-to-police, inter-official communication
model OfficialChatRoom {
  id        String   @id @default(uuid())
  user1Id   String   // First participant
  user2Id   String   // Second participant
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user1     User              @relation("OfficialChatsAsUser1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2     User              @relation("OfficialChatsAsUser2", fields: [user2Id], references: [id], onDelete: Cascade)
  
  // Messages in this room
  messages  OfficialChatMessage[]
  
  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
  @@map("official_chat_rooms")
}

// Official Chat Message - Individual messages in official chat rooms
model OfficialChatMessage {
  id          String      @id @default(uuid())
  chatRoomId  String
  senderId    String
  message     String      @db.Text
  messageType MessageType @default(TEXT)       // NEW
  mediaUrl    String?                           // NEW - Encrypted Cloudinary URL
  encrypted   Boolean     @default(true)
  read        Boolean     @default(false)
  
  createdAt   DateTime @default(now())
  
  // Relations
  chatRoom    OfficialChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  sender      User             @relation("SentOfficialMessages", fields: [senderId], references: [id], onDelete: Cascade)
  
  @@index([chatRoomId])
  @@index([senderId])
  @@index([createdAt])
  @@map("official_chat_messages")
}

// Vehicle Assignment - Assign drivers to vehicles
model VehicleAssignment {
  id        String                   @id @default(uuid())
  vehicleId String
  driverId  String
  ownerId   String
  
  status    VehicleAssignmentStatus @default(PENDING)
  salary    Int
  startDate DateTime?
  endDate   DateTime?
  notes     String?                  @db.Text
  
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
  
  // Relations
  vehicle   Vehicle                  @relation(fields: [vehicleId], references: [id], onDelete: Restrict)
  driver    User                     @relation("DriverAssignments", fields: [driverId], references: [id], onDelete: Restrict)
  owner     User                     @relation("OwnerAssignments", fields: [ownerId], references: [id], onDelete: Cascade)
  
  @@index([vehicleId])
  @@index([driverId])
  @@index([ownerId])
  @@index([status])
  @@map("vehicle_assignments")
}
